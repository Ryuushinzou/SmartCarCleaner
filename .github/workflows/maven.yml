name: Build Spring app with Maven
env: 
  working_directory: ./backend/
  LOCAL_DATABASE: MYSQL
  LOCAL_DATABASE_URL: jdbc:mysql://127.0.0.1:3306/sccdb
  LOCAL_DATABASE_USERNAME: root
  LOCAL_DATABASE_PASSWORD: root
  LOCAL_DATABASE_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect
  FIREBASE_DATABASE_URL: https://some-project-85e15.firebaseio.com
  FIREBASE_PRIVATE_KEY: ../.github/secrets/backend/firebase.json
  TOKEN_GENERATOR_KEY: ci-token-generator-key

on:
  push:
    branches: [ master ]
    paths:
      - "backend/**"
  pull_request:
    branches: 
        - master
        - 'backend/**'
    paths:
      - "backend/**"

jobs:
  pre-run:
    name: Pre-run Job
    runs-on: ubuntu-latest
    steps:
    - name: Print Environment Variables
      run: |
        echo FIREBASE_DATABASE_URL = $FIREBASE_DATABASE_URL
        echo FIREBASE_PRIVATE_KEY = $FIREBASE_PRIVATE_KEY
        echo LOCAL_DATABASE = $LOCAL_DATABASE
        echo LOCAL_DATABASE_URL = $LOCAL_DATABASE_URL
        echo LOCAL_DATABASE_USERNAME = $LOCAL_DATABASE_USERNAME
        echo LOCAL_DATABASE_PASSWORD = $LOCAL_DATABASE_PASSWORD
        echo LOCAL_DATABASE_HIBERNATE_DIALECT = $LOCAL_DATABASE_HIBERNATE_DIALECT
        echo TOKEN_GENERATOR_KEY = $TOKEN_GENERATOR_KEY

  test-mysql-host:
    name: MySQL Host
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: sccdb
        ports:
        - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
    - name: Verify MySQL connection from host
      run: |
        sudo apt-get install -y mysql-client
        mysql --host 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -uroot -proot -e "CREATE DATABASE IF NOT EXISTS sccdb;"

  compile:
    runs-on: ubuntu-latest
    needs: test-mysql-host
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: sccdb
        ports:
        - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
    strategy:
      matrix:
        java: [ 8, 11 ]
    name: Java ${{ matrix.java }} compile
    steps:
      - uses: actions/checkout@master
      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Run MySQL
        run: |
          sudo systemctl start mysql
          mysql --host 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -uroot -proot -e 'CREATE DATABASE IF NOT EXISTS sccdb;'
      - name: Compile project
        run: mvn clean compile
        working-directory: ${{ env.working_directory }}

  build:
    runs-on: ubuntu-latest
    needs: compile
    name: Build Maven project
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: sccdb
        ports:
        - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
    - uses: actions/checkout@v1
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Test MySQL connection
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P"$PORT" --silent; do
          sleep 1
        done
      env:
        PORT: ${{ job.services.mysql.ports['3306'] }}
    - name: Build Spring project
      run: |
        echo "Starting MySQL..."
        sudo systemctl start mysql

        mysql --host 127.0.0.1 --port "$PORT" -uroot -proot -e 'CREATE DATABASE IF NOT EXISTS sccdb; SHOW DATABASES;'
        echo "MySQL started on host: 127.0.0.1 port: 3306... db name: sccdb"

        echo "Start Maven build..."
        mvn clean verify
      working-directory: ${{ env.working_directory }}
      env:
        PORT: ${{ job.services.mysql.ports['3306'] }}
    - name: Run tests
      run: mvn test
      working-directory: ${{ env.working_directory }}
    - name: Upload Maven build artifact
      uses: actions/upload-artifact@v1
      with:
       name: artifact
       path: ${{ env.working_directory }}/target/app-0.0.1-SNAPSHOT.jar
